<?php

namespace Test\SquishedStatus;

require_once(__DIR__ . '/../../autoload.php');

/**
 * @backupGlobals disabled
 */
class SolverTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @dataProvider dataProviderFinalSolution
     * @param type $expectation
     * @param type $line
     */
    public function testFinalSolution($expectation, $line)
    {

        $solver = new \FbHack\SquishedStatus\Solver();
        $this->assertEquals($expectation, $solver->getSolutionForLine($line));
    }

    public function testModulo() {
        $this->assertEquals(1, 4207849485 % 4207849484);
        $this->assertEquals(1, count(array_filter(array(0, 0, 1))));
    }

    public function dataProviderFinalSolution()
    {
        return array(
            array(2, '12 12'), // valid '1 2', 12
            array(1, '11 12'), // valid '1 2'
            array(3, '11 111'), // valid '1 1 1', '1 11', '11 1', non valid '111'
            array(2, '11 112'), // valid '1 1 2', '11 2', non valid '1 12', '111'

            array(4, '255 219'), // valid '2 1 9', '21 9', '2 19', '219'
            array(3, '218 219'), // valid '2 1 9', '21 9', '2 19', no '219'

            array(0, '2 101'), // not valid '1 01', '1 0 1', '10 1'
            array(3659341532, '231 194155135726055100130197415514203017512420847223781822322915719551815383749223691541544113214021951861651170213178138171991861647526938612011020149412061052031011941111111995891102210718121119214510914316213610801781572301614522018086292101379048221222038134218061801102211661091048268513213714721110620061208432123104522101941386086551707810532789915499129111819013461103851097872082221203914193611296420215319685231103106242241942256740132173312218812110917141942189516581221368253682521712613720417117612231029075251259739140213202381042916913013477202541588019945611927719019021347137166224371313210682791854670123362717124911150439811218715728187663110511020944706588208124103132218165691992420613349733420426578116722219337163722158695820714137781606948221019877460162108304337186185621552914099103139271439180432161271098622818511128541555476216208895213737320411166996798215952818412022820212271313814121122712192172158310518279138229838392369209152146104999817358200227241721711799212175150620315620360781001727211381011251020939222147323150140991283122784208215219193814636217310918712721301861711961021591971995216487146171587614314228190435414424631121125322950221341544387117618017150122209401812382317218755167561227879165217116741365216320621910314710210746963311023872181862719819816517134391862104717080942309312814599108131789342157224510014118618735148576801505353431351621651731926711120043186821926188295349857315222193069268447127101523720047784618270118223206642212061891078616199182190421014676971771961801307515876277718819913537136921111766512733811241741991842061412613010750177101431601361221411551872355581575359621222316914115680501561829134613210913971829511281922116520615162167651701861442292008815138213125167161190148189203117105266171981052101471558021719020911414222617115719814313751112023014949172225984254261512661169811202528109212125432268612119910082292121764577021269661081231369184112120282242058317416982031751441641101227277228115281597170140141128140123186182093916910417814320337521381551432510419422740122511320955182125939973154351582221394812434861131731741411291016613801982161816036208291542291231011701793419191682193718222364171131532101112052181788741194128543619712337832211411451131641021602126015522950214205541861891601200107229219120170132158611252021621116622170110116113181214215129191180118100930129100775019420113222100226190521789514121216113922539226175599016518271151611615196881785288105180823162155177231115710715671158921711612940112101'), // not valid '1 01', '1 0 1', '10 1'
        );
    }

}
